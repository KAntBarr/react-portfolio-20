[
  "The final project of my bootcamp to show the summation of all that I have learned and acquired! Again we had around 12 days to work on this project, and for the last 6 days I used PTO to strictly code. This project is a social media clone that is heavily inspired by Twitter. I purposefully decided to have a small team of two, so that I can work on as much as I can in order to grow. Never before have I read documentation of that volume. I read the docs for Material UI, Redux Toolkit, Apollo Server and Apollo Client(GraphQL), React, React Router, and Mongoose. Within those six days, I contributed around 14,000 lines to the main branch, almost double of my second project from this bootcamp. With this application, users are able to sign in/login and maintain a session with the use of JWTs. Users can create and delete posts and comments, but can not edit them. The concept of immutable content seemed like a cool idea to me for a social media app. Users can also create chatrooms and add users to those chatrooms to send messages between each other. Again with the time restriction, I would say we were only able to get about half done of what we wanted to have done to consider this a solid social media site. Some things that need to be completed are: real-time messaging in chatrooms, the ability to search users/posts/comments, and send friend requests to users. Real-time messaging requires subsricptions(websockets), which we only have working within the Apollo Sandbox. The frontend seems to have trouble establishing a connection, but we know how we are going to handle/manipulate the data once the connection is working. We were thinking of using a npm package called, mongoose-fuzzy-searching, in order to search for users/posts/comments. Some things that would be nice to have are: the ability to like posts and comments, error popups, and real-time notifications. I loved working on this app and building and endurance to code and read documentation for long periods of time. I will continue working on this as much as I can, but the leetcode grind calls for me, along with many other things.",
  "This piece is a Weather Dashboard Site, which includes my first experiences of ever using/calling RESTful APIs and integrating third party libraries such as Bootstrap and JQuery. Since this assignment was still towards the beginning of the bootcamp, there wasn't a backend to store data to make it persistent. Local storage was again used in order to store a list of cities that were previously searched. The Fetch API was used to make RESTful API calls to OpenWeather's APIs. Promises were used to asynchronously process the returned data. I realized how powerful the JQuery selectors can be while doing DOM manipulation. I decided to become very familiar with CSS and Bootstrap, which helped make future assignments easier to design. During the process of becoming familiar with CSS & Bootstrap, I became comfortable asking ChatGPT simple, direct questions that provided the exact solution I was looking for.",
  "This was my first group project of the bootcamp! As a team we had multiple ideas of what we wanted to do, but due to the time restrictions, we decided to build an application that pairs cocktails together with movies. We attempted to use Jira to help keep track with the development of our project. It was all our first time using Jira, so we all had difficulties, but still grew from it. The application would make API calls to OMDB, for the movie searches, and to CocktailDB, for the cocktails. The pairings of cocktails to movies is random, or as random as it can get. As a team, we thought a good future development would be to have certain cocktails in certain movie generes. This way, when a user searches a movie, a random cocktail that is associated with those movie genres will be picked. With the functionality of local storage, users can save cocktails that they like for later and it will show in their list at the bottom. Instead of going with Bootstrap to style our app, we decided to try something different and went with Bulma. I probably wouldn't choose to use Bulma again because the documentation didn't seem to be as good to me as other libraries. One thing I realized was that I needed to improve my collaboration skills, so that it is easier to distribute tasks among teammates and not step on each others' toes.",
  "Outside of my bootcamp, this was my senior project from my time at Sac State. To complete my major in Computer Engineering, a team of three computer engineering majors and one electrical engineering major came together to build a self-driving rc car. This was a almost a one year project starting from January 2022 to December 2022. It was an amazing experience and I am absolutely blessed to have had the team that I had. From planning what materials we were going to use/buy, to having to completely change direction mid-project, it was all a great learning experience. Once we had planned what materials to use and had a working model, using a raspberry pi, we could begin driving the rc car. One teammate used their 3D printer to put together parts, while the rest of us bought a preassembled chasis with tracks in order to start experimenting. We attached motor drivers to the GPIO pins on the raspberry pi in order to programmatically control the motors. At first we came up with a manual mode, which is a remote controller that is connected by bluetooth to the raspberry pi. I used an 8bit Do and another teammate used a PS5 controller. After we could successfully drive our rc cars in manual mode, we started working on the autonomous mode. We added an usb camera to the car in order to take in input of what is in front of the car. We used the openCV library to deal with all image processing. While still in the first half of the project, we were trying to have our cars drive themselves by doing angle calculations on the lanes we had created. This was not working how we would like and only thought it would be extremely difficult to continue on down that path. Towards the start of the second-half of the project, we discussed and decided on using Pytorch to implement neural networks to control our cars. We thought that if we take pictures of the track/lanes as we manually drive, then we could train our neural networks against that data. We were right! After what felt like plenty of training, our prototype was able to complete laps on our track by itself. We also decided to add an ultrasonic sensor to detect any nearby objects, so that the car can protect itself by slowing to a stop. Since the raspberry pi had a lot going on, image processing, neural network managment, and active ultrasonic detection, we thought it would be best to try and optimize. We messed around with multiprocessing and multithreading, but ending up deciding that multithreading would be enough. Again, it was a great opportunity to see how projects should be worked on, and the effort they should be given. ",
  "This piece is a Javascript Quiz Site, one of the first few a solo projects/assignments of my bootcamp. I was able to practice my skills on using Web APIs to traverse/manipulate DOM elements, set event listeners, and use local storage. Event listeners were used to listen to button clicks for starting the quiz, selecting answers, and submitting your initials with your highscore. Local storage was used to keep track of the highscores. The quiz includes a timer, implemented using setInterval(), that will countdown when the quiz is started. It will also decrease when a user chooses a wrong answer. The time at the end of the quiz will be the score of that quiz attempt.",
  "The second project of my bootcamp, and also the first full stack project I've worked on! A little over a year ago, I started getting into doing my own car maintenance and wanted something to make it easier to keep track of all the tasks I need to do for my cars. My team and I took this opportunity to create a car task tracker app named, Geeks Garage. With this application, users can sign up/login to start keeping track of all car tasks. They can add, edit, and delete cars from their garage. Tasks for each car can also be added, edited, and deleted as well. Completion dates can be picked for each task. The user may edit/update their profile information and delete their whole account if they choose. We used bcrypt to handle hashing and comparing passwords, session cookies to determine if a user is currently signed in, express to handle the routes, sequelize to handle the models and queries, and handlebars as our templating engine. This time around, my team and I were a little better about starting and keeping on track with sprints in Jira. The most difficult thing about this project was having big ideas, but not having enough time to bring them to life because we only had around 12 days for the project. This would definitely be a fun project to continue working on in the future, maybe I'll use the same idea to create an Android and/or iOS app."
]